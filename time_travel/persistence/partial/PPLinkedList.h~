
#include <iostream>
#include "Node.h"

using namespace std;

// PP means partial persistence
template<class T>
class PPLinkedList {
	public:
		Node<T> *head;
		Node<T> *tail;
		long size;

		PPLinkedList(): head(NULL), tail(NULL), size(0) {}
		PPLinkedList(Node<T>* newNode) : head(newNode), tail(newNode), size(1) {}
		void insertToHead(T val);
		void insertToTail(T val);
		void insertAt(int position, T val);

		int getSize() { return size;}
		
		Node<T>* getNodeAt(int position);
		T readNode(T value, int version);// leer el dato value en la version v
		void updateNode(int position, T value);
		//void deleteNode(int position)

		void print();
};

template<class T>
void PPLinkedList<T>::insertToTail(T val) {
	Node<T> *newNode = new Node<T>(val, 0);
	if (tail == NULL) {
		newNode->next = tail;
		tail = newNode;
		head = newNode;
	}
	tail->next = newNode;
	tail = tail->next;
	size++;
}


template<class T>
void PPLinkedList<T>::insertToHead(T val) {
	Node<T> *newNode = new Node<T>(val, 0);
	newNode->next = head;
	head = newNode;
	if (head->next == NULL) {
		tail = newNode;
	}
	size++;
}

template<class T>
void PPLinkedList<T>::insertAt(int position, T val) {
	if (position >= size) {
		return;
	}
	if (position == 0) {
		insertToHead(val);
		return;
	}
	if (position == size - 1) {	
		insertToTail(val);
		return;
	}
	Node<T> *temp = head;
	while (position != 1) {
		temp = temp->next;
		position--;
	}
	Node<T> *newNode = new Node<T>(val, 0);
	newNode->next = temp->next;
	temp->next = newNode;
	size++;
}

template<class T>
void PPLinkedList<T>::print() {
	Node<T> *current = head;
	while (current) {
		cout << current->data << " --> ";
		current = current->next;
	}
	cout << "NULL" << endl;
}	

template<class T>
T PPLinkedList<T>::readNode(T value, int version) {
    Node<T> *p = head;
    while (p) {
        if (p->data == value || p->modsData == value) // buscar la version
            return searchVersion(version);        
        else
            if (p->modPointer != NULL)
                p = p->modPointer;
            else
                p = p->next;
    }

/*
	if (position >= size) {
		return NULL;
	}
	Node<T> *temp = getNodeAt(position);
	return temp->getDataAtVersion(version);*/
}

template<class T>
Node<T>* PPLinkedList<T>::getNodeAt(int position) {
	Node<T> *temp = head;
	for (int i = 0; i != position; i++) {
		temp = temp->next;
	}
	return temp;
}

template<class T>
void PPLinkedList<T>::updateNode(int position, T value) {	
	if (position >= size) {
		return;
	}
	Node<T> *temp = getNodeAt(position);
	if (!temp->isNodeFull()) {
		temp->addMod(value);
	} else {
		Node<T> *newNode = new Node<T>(value, 3);
		// copy latest version of each field (data and pointers)
		newNode->next = temp->next; 		
		// copy backpointers to n'
		newNode->backpointer = temp->backpointer;		
		// n points to x -> redirect its backpointers to n'
		temp->next->backpointer = newNode;
		// x points to n -> call write (x.p, n') recursively
		
		cout << "EL NODO ESTA FULLL" << endl;
	}	
}


